#include <iostream>

using namespace std;

int main()
{
	int k1, k2, m, p1, p2, n1, n2; // 1 - известная квартира, 2 - неизвестная
	cin >> k2 >> m >> k1 >> p1 >> n1;
	if (m < n1) {
		cout << "-1 -1";
		return 0;
	}
	k1 -= 1;
	k2 -= 1;
	if ((p1 == 1) && (n1 == 1)) {
		if (k2 <= k1)
			cout << "1 1";
		else {
			p2 = 0;
			n2 = 0;
			if (m == 1)
				n2 = 1;
			if (k2 <= (k1 + 1) * m)
				p2 = 1;
			cout << p2 << ' ' << n2;
		}
	}
	else {
		int k_m = k1 / ((p1 - 1)*m + (n1 - 1)); // Макс. число квартир на площадке
		int x = k1 % ((p1 - 1)*m + (n1 - 1)); // Остаток (номер квартиры на этаже)
		if (k_m == 0 || x >= k_m)
			cout << "-1 -1";
		else {
			p2 = k2 / (k_m * m) + 1; // Нашли p2 для макс. k_m
			n2 = (k2 - (k_m * m * (p2 - 1))) / k_m + 1; // Нашли n2 для макс. k_m

														// Попробуем проверить, есть ли другие варианты для k_m
			k_m -= 1;
			x += (p1 - 1)*m + (n1 - 1);
			while (x < k_m) { // Это можно делать до тех пор, пока номер квартиры на этаже не больше числа квартир на этаже
				int p2_new = k2 / (k_m * m) + 1; // Нашли p2 для макс. k_m
				int n2_new = (k2 - (k_m * m * (p2_new - 1))) / k_m + 1; // Нашли n2 для макс. k_m
				if (p2 != p2_new) // Если возможны разные варианты для p2 и n2, значит выводим ноль
					p2 = 0;
				if (n2 != n2_new)
					n2 = 0;
				k_m -= 1;
				x += (p1 - 1)*m + (n1 - 1);
			}
			cout << p2 << ' ' << n2;
		}
	}

	return 0;
}